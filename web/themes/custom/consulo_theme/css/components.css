@charset "UTF-8";
/**
 * @file
 * SMACSS: components
 *
 * Discrete, reusable UI elements.
 * Import all custom components from ./components/ subdirectory
 * Turn here on only what you actually need.
 *
 * ITCSS: components
 */
/**
 * Imports
 *
 * First import our custom variables and mixins
 */
/**
 * @file
 * Sass index file
 *
 * The main importer and organizer sass file.
 *
 */
/**
 * Settings
 *
 * Setting files contain **global** configurations that are shared by more than
 * one modules.
 * Settings that are connected to one and only module are a part of the module
 * itself.
 * Local configurations should be contained into the modules (objects,
 * components, etc.) that are related to.
 */
/**
 * @file
 * Settings
 *
 * Setting files contain **global** configurations that are shared by more than
 * one modules. Settings that are connected to one and only module are a part
 * of the module itself.
 * Local configurations should be contained into the modules (objects,
 * components, etc.) that are related to.
 * It’s important not to output any CSS in the first 2 layers.
 */
/**
 * @file
 * Breakpoint Settings
 *
 * - Define breakpoint variables
 */
/**
 * @file
 * Color Settings
 *
 * - Define color variables
 */
/**
 * @file
 * Breakpoint Settings
 *
 * - Define breakpoint variables
 */
/**
 * @file
 * Typography Settings
 *
 * - Import Webfonts
 * - Define Font-families
 * - Define Typography-related global variables
 */
@import url("https://fonts.googleapis.com/css?family=Playfair+Display");
@import url("https://fonts.googleapis.com/css?family=Rubik:400,500,700");
/**
 * @file
 *** FOUNDATION FOR SITES BY ZURB ***
 * foundation.zurb.com
 * @license under MIT Open Source
 */
/**
 * Imports
 */
/**
 * @file
 *** Foundation for Sites by ZURB ***
 * foundation.zurb.com
 * @licence under MIT Open Source
 */
/**
 * @group functions
 */
/**
 * Removes the unit (e.g. px, em, rem) from a value, returning the number only.
 *
 * @param {Number} $num - Number to strip unit from.
 * @returns {Number} The same number, sans unit.
 */
/**
 * Converts one or more pixel values into matching rem values.
 *
 * @param {Number|List} $values - One or more values to convert.
 * Be sure to separate them with spaces and not commas. If you
 * need to convert a comma-separated list, wrap the list in
 * parentheses.
 *
 * @param {Number} $base [null] - The base value to use when
 * calculating the `rem`. If you're using Foundation out of
 * the box, this is 16px. If this parameter is `null`, the
 * function will reference the `$base-font-size` variable as
 * the base.
 *
 * @returns {List} A list of converted values.
 */
/**
 * Converts a pixel value to matching rem value. *Any* value passed, regardless
 * of unit, is assumed to be a pixel value. By default, the base pixel value
 * used to calculate the rem value is taken from the `$global-font-size`
 variable.
 *
 * @access private
 * @param {Number} $value - Pixel value to convert.
 * @param {Number} $base [null] - Base for pixel conversion.
 * @returns {Number} A number in rems, calculated based on the given value and
 * the base pixel value. rem values are passed through as is.
 */
/**
 * Converts a pixel, percentage, rem or em value to a unitless value based on a
 * given font size. Ideal for working out unitless line heights.
 *
 * @param {Number} $value - Value to convert to a unitless line height
 * @param {Number} $base - The font size to use to work out the line height
 * - defaults to $global-font-size
 * @return {Number} - Unitless number
 */
/**
 * @file
 *** FOUNDATION FOR SITES BY ZURB ***
 * foundation.zurb.com
 * @licence under MIT Open Source
 */
/**
 * @group functions
 * Determine if a value is not falsey, in CSS terms.
 * Falsey values are `null`, `none`,  * `0` with any
 * unit, or an empty list.
 *
 * @param {Mixed} $val - Value to check.
 *
 * @returns {Boolean} `true` if `$val` is not falsey.
 */
/**
 * Determine a top/right/bottom/right value on a padding, margin, etc.
 * property, no matter how many values were passed in. Use this
 * function if you need to know the specific side of a value, but don't
 * know if the value is using a shorthand format.
 *
 * @param {List|Number} $val - Value to analyze. Should be a shorthand
 * sizing property, e.g. "1em 2em 1em"
 *
 * @param {Keyword} $side - Side to return. Should be `top`, `right`,
 * `bottom`, or `left`.
 *
 * @returns {Number} A single value based on `$val` and `$side`.
 */
/**
 * Given border $val, find a specific element of the border, which is $elem.
 * The possible values for $elem are width, style, and color.
 *
 * @param {List} $val - Border value to find a value in.
 *
 * @param {Keyword} $elem - Border component to extract.
 *
 * @returns {Mixed} If the value exists, returns the value. If the value is
 * not in the border definition, the function will return a 0px width, solid
 * style, or black border.
 */
/**
 * Finds a value in a nested map.
 *
 * @link https://css-tricks.com/snippets/sass/deep-getset-maps/ Deep Get/Set in Maps
 * @param {Map} $map - Map to pull a value from.
 * @param {String} $keys... - Keys to use when looking for a value.
 * @returns {Mixed} The value found in the map.
 */
/**
 * Casts a map into a list.
 *
 * @link http://hugogiraudel.com/2014/04/28/casting-map-into-list/
 * @param {Map} $map - Map to pull a value from.
 * @returns {List} Depending on the flag, returns either $keys or $values or both.
 */
/**
 * Safely return a value from a map.
 *
 * @param {Map} $map - Map to retrieve a value from.
 * @param {String} $key - Name of the map key.
 * @returns {List} Found value.
 */
/**
 * @group breakpoints
 * A list of named breakpoints. You can use these with the `breakpoint()` mixin
 * to quickly create media queries.
 *
 * @type Map
 */
/**
 * The largest named breakpoint in which to include print as a media type
 *
 * @type Keyword
 */
/**
 * All of the names in this list will be output as classes in your CSS, like
 * `.small-12`, `.medium-6`, and so on. Each value in this list must also be in
 * the `$breakpoints` map.
 *
 * @type List
 */
/**
 * Generates a media query string matching the input value. Refer to the
 * documentation for the `breakpoint()` mixin to see what the possible
 * inputs are.
 *
 * @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem,
 * or em value to process.
 */
/**
 * Wraps a media query around the content you put inside the mixin. This mixin
 * accepts a number of values:
 * - If a string is passed, the mixin will look for it in the `$breakpoints`
 *   map, and use a media query there.
 * - If a pixel value is passed, it will be converted to an em value using
 *   `$global-font-size` as the base.
 * - If a rem value is passed, the unit will be changed to em.
 * - If an em value is passed, the value will be used as-is.
 *
 * @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em
 * value to process.
 * @output If the breakpoint is "0px and larger", outputs the content as-is.
 * Otherwise, outputs the content wrapped in a media query.
 */
/**
 * Convers the breakpoints map to a URL-encoded string, like this:
 * `key1=value1&key2=value2`. The value is then dropped into the CSS for a
 * special `<meta>` tag, which is read by the Foundation JavaScript. This is
 * how we transfer values from Sass to JavaScript, so they can be defined in
 * one place.
 *
 * @access private
 * @param {Map} $map - Map to convert.
 * @returns {String} A string containing the map's contents.
 */
/**
 * Find the next key in a map.
 *
 * @access private
 * @param {Map} $map - Map to traverse.
 * @param {Mixed} $key - Key to use as a starting point.
 * @returns {Mixed} The value for the key after `$key`, if `$key` was found.
 * If `$key` was not found, or `$key` was the last value in the map, returns
 * `null`.
 */
/**
 * Return a list of our named breakpoints less than $key. Useful for dealing with
 * responsive gutters for the grid.
 *
 * @access private
 * @param {String} $key - Key to use as last breakpoint.
 * @returns {Array} The list of breakpoints up to and. If $key is auto, returns
 * breakpoints above the zero
 */
/**
 * Return a list of our named breakpoints less than $key. Useful for dealing
 * with responsive gutters for the grid.
 *
 * @access private
 * @param {String} $breakpoing - a named or non-named breakpoing.
 * @returns {Array} The list of breakpoints up to and. If $key is auto, returns
 * breakpoints above the zero
 */
/**
 * Get a value for a breakpoint from a responsive config map or single value.
 * - If the config is a single value, return it regardless of `$value`.
 * - If the config is a map and has the key `$value`, the exact breakpoint
 *   value is returned.
 * - If the config is a map and does *not* have the breakpoint, the value
 *   matching the next lowest breakpoint in the config map is returned.
 *
 * @access private
 * @param {Number|Map} $map - Responsive config map or single value.
 * @param {Keyword} $value - Breakpoint name to use.
 * @return {Mixed} The corresponding breakpoint value.
 */
/**
 * Tools
 *
 * Globally used mixins and functions.
 * It’s important not to output any CSS in the first 2 layers.
 */
/**
 * @file
 * Tools
 *
 * Tools are sets of globally used sass mixins and functions. Mixins that are
 * connected to one and only module are a part of the module itself.
 * It’s important not to output any CSS in the first 2 layers.
 */
/**
 * @file
 *** FOUNDATION FOR SITES AND CUSTOM MIXINS
 */
/**
 * @group Foundation for Sites mixins
 * Mixins placeholder file
 * @todo These are mostly from Foundation and should be removed and used straight from Foundation.
 */
.clearfix:before, .clearfix:after {
  content: " ";
  display: table;
}

.clearfix:after {
  clear: both;
}

/**
 * Horizontally or vertically aligns the items within a flex container.
 *
 * @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`,
 * `right`, `center`, `justify`, or `spaced`. Or, set it to `null`
 * (the default) to not set horizontal alignment.
 * @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`,
 * `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not
 * set vertical alignment.
 */
/**
 * Vertically align a single column within a flex row. Apply this mixin to a
 * flex column.
 *
 * @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`,
 * `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not
 * set vertical alignment.
 */
/**
 * Changes the source order of a flex child. Children with lower numbers appear
 * first in the layout.
 *
 * @param {Number} $order [0] - Order number to apply.
 */
/**
 * Change flex-direction
 *
 * @param {Keyword} $direction [row] - Flex direction to use. Can be
 * - row (default): same as text direction
 * - row-reverse: opposite to text direction
 * - column: same as row but top to bottom
 * - column-reverse: same as row-reverse top to bottom
 */
/**
 * @include flex-wrap(nowrap | wrap | wrap-reverse);
 * Default: nowrap
 */
/**
 * @include flex-flow(values);
 * Default: row nowrap
 */
/**
 * @include order(int);
 * Default: 0
 */
/**
 * @include flex-grow(int);
 * Default: 1
 */
/**
 * @include flex-shrink(int);
 * Default: 0
 */
/**
 * @include flex-basis(int);
 * Default: auto
 */
/**
 * @include justify-content(flex-start | flex-end | center | space-between
 * | space-around);
 * Default: flex-start
 */
/**
 * @include align-items(flex-start | flex-end | center | baseline | stretch);
 * Default: stretch
 */
/**
 * @include align-self(auto | flex-start | flex-end | center | baseline | stretch);
 * Default: auto
 */
/**
 * @include align-content(flex-start | flex-end | center | space-between | space-around | stretch);
 * Default: stretch
 */
/**
 * @group theming mixins
 */
/**
 * Utilities
 *
 * Utilities and helper classes with ability to override anything which goes
 * before in the triangle, eg. hide helper class.
 * They are usually one line of code and have !important to make sure they
 * override all element styles when used.
 */
/**
 * Components
 *
 * Specific UI components.
 * This is where majority of our work takes place and our UI components are
 * often composed of Objects and Components.
 * They contain cosmetic CSS and they can be directly overwritten to fit your
 * UI Kit style.
 */
/**
 * @file
 * Breadcrumb component
 *
 * Provide alternative navigation for site.
 *
 * @package: navigation
 */
/**
 * @file
 * Button component
 *
 * Button types.
 *
 * @package: interactive
 */
/**
 * @file
 * Form component
 *
 * Form and input elements, like:
 *  - input (text, number, email, password...)*
 *  - textarea
 *  - select
 *  - radios and checkboxes
 *
 * *Buttons and `input[type="submit"]` are in Button component.
 *
 * @package: interactive
 * @see more 5.components/components.search
 */
/**
 * @file
 * Navigation component
 *
 * Main navigation menu of site.
 *
 * @package: navigation
 */
#block-consulo-theme-branding .site-logo img {
  height: 40px;
}

@media print, screen and (min-width: 48.0625em) {
  #block-consulo-theme-branding .site-logo img {
    height: auto;
  }
}

.hamburger {
  position: relative;
  margin-top: 15px;
}

@media print, screen and (min-width: 48.0625em) {
  .hamburger {
    display: none;
  }
}

.close {
  position: absolute;
  right: 22px;
  top: 15px;
}

@media screen and (max-width: 48em) {
  #block-consulo-theme-main-menu {
    -o-transition: all 0.3s;
    -webkit-transition: all 0.3s;
    transition: all 0.3s;
    padding: 3rem;
    background-color: #e2e1e7;
    height: 100vh;
    width: 90%;
    position: absolute;
    top: 0;
    right: -100%;
    bottom: 0;
  }
  #block-consulo-theme-main-menu.active {
    -webkit-box-shadow: -14px 0 8px 0 rgba(86, 75, 89, 0.5);
    box-shadow: -14px 0 8px 0 rgba(86, 75, 89, 0.5);
    right: 0;
  }
}

@media print, screen and (min-width: 48.0625em) {
  #block-consulo-theme-main-menu {
    padding-top: 1.5rem;
  }
}

#block-consulo-theme-main-menu .menu {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: start;
  -ms-flex-pack: start;
  justify-content: flex-start;
}

@media print, screen and (min-width: 48.0625em) {
  #block-consulo-theme-main-menu .menu {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
  }
}

@media screen and (max-width: 48em) {
  #block-consulo-theme-main-menu .menu .menu-item {
    padding: 15px 0;
  }
  #block-consulo-theme-main-menu .menu .menu-item:not(:last-child) {
    border-bottom: 1px solid rgba(86, 75, 89, 0.5);
  }
}

@media print, screen and (min-width: 48.0625em) {
  #block-consulo-theme-main-menu .menu .menu-item:not(:last-child) {
    margin-right: 3rem;
  }
}

/**
 * @file
 * Search component
 *
 * Site search, a special form component.
 *
 * @package: interactive
 * @see more 5.components/components.form
 */
/**
 * @file
 * Typography component
 *
 * General typography theming.
 *
 * @package: typography
 */
/** Main menu **/
#block-consulo-theme-main-menu .menu-item a {
  -o-transition: all 0.3s;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
  font-family: "Rubik", sans-serif;
  font-size: 1.2rem;
  color: #564b59;
  font-weight: 500;
  text-transform: uppercase;
}

@media print, screen and (min-width: 48.0625em) {
  #block-consulo-theme-main-menu .menu-item a {
    font-size: 1.4rem;
  }
  #block-consulo-theme-main-menu .menu-item a:hover {
    color: #ae2c43;
  }
}

/** Slider **/
.slider-text-holder a,
.slider-text-holder h2 {
  -o-transition: all 0.3s;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
  font-family: "Playfair Display", serif;
  font-size: 2.8rem;
  font-weight: 100;
  margin-bottom: 1.3rem;
  color: #564b59;
}

@media print, screen and (min-width: 48.0625em) {
  .slider-text-holder a,
  .slider-text-holder h2 {
    font-size: 5.1rem;
  }
}

@media print, screen and (min-width: 48.0625em) {
  .slider-text-holder a:hover h2 {
    color: #ae2c43;
  }
}

.slider-text-holder .slider-description {
  font-family: "Rubik", sans-serif;
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin-bottom: 3.5rem;
}

@media print, screen and (min-width: 48.0625em) {
  .slider-text-holder .slider-description {
    font-size: 1.4rem;
    line-height: 2rem;
  }
}

.slider-text-holder .slider-button a {
  -o-transition: all 0.3s;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
  font-family: "Rubik", sans-serif;
  font-size: 1.3rem;
  text-transform: uppercase;
  color: #564b59;
  font-weight: 500;
  display: inline-block;
  border: 1px solid #564b59;
  padding: 1.5rem 4.5rem;
}

.slider-text-holder .slider-button a:hover {
  background-color: rgba(86, 75, 89, 0.1);
  color: #ae2c43;
}

/** Footer **/
#block-footer span {
  font-family: "Rubik", sans-serif;
  color: #fff;
  line-height: 2rem;
  font-size: 1rem;
  text-transform: uppercase;
  letter-spacing: .1rem;
  text-align: center;
}

@media print, screen and (min-width: 48.0625em) {
  #block-footer span {
    opacity: .8;
    line-height: 4rem;
    text-align: initial;
  }
}

#block-footer span a {
  color: #fff;
}

/**
 * @file
 * Main slider component
 *
 * Home page of the site
 *
 * @package: slider
 */
.view-id-consulo_frontpage .slick_slider .slick-prev,
.view-id-consulo_frontpage .slick_slider .slick-next {
  -webkit-transform: translate(0, -50%);
  -ms-transform: translate(0, -50%);
  transform: translate(0, -50%);
  border: 0;
  background-color: transparent;
  position: absolute;
  top: 50%;
  z-index: 999;
  display: none !important;
}

.view-id-consulo_frontpage .slick_slider .slick-prev:focus,
.view-id-consulo_frontpage .slick_slider .slick-next:focus {
  border: 0;
  outline: 0;
}

.view-id-consulo_frontpage .slick_slider .slick-prev i,
.view-id-consulo_frontpage .slick_slider .slick-next i {
  color: #ae2c43;
}

@media print, screen and (min-width: 48.0625em) {
  .view-id-consulo_frontpage .slick_slider .slick-prev,
  .view-id-consulo_frontpage .slick_slider .slick-next {
    display: inline-block !important;
  }
}

.view-id-consulo_frontpage .slick_slider .slick-prev {
  left: 4.5rem;
}

.view-id-consulo_frontpage .slick_slider .slick-next {
  right: 4.5rem;
}

.view-id-consulo_frontpage .slick_slider .slick-dots {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  position: absolute;
  bottom: 25%;
  right: 3.6rem;
  display: none !important;
}

@media print, screen and (min-width: 48.0625em) {
  .view-id-consulo_frontpage .slick_slider .slick-dots {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
  }
}

.view-id-consulo_frontpage .slick_slider .slick-dots li {
  list-style: none;
}

.view-id-consulo_frontpage .slick_slider .slick-dots li button {
  text-indent: -9999px;
  width: 11px;
  height: 11px;
  border-radius: 50%;
  background-color: #a2a0ad;
  border: 0;
  margin: 0 6px;
  white-space: nowrap;
  overflow: hidden;
}

.view-id-consulo_frontpage .slick_slider .slick-dots li.slick-active button {
  background-color: #ae2c43;
}

.view-id-consulo_frontpage .slick_slider .slick-background {
  position: absolute;
}

.view-id-consulo_frontpage .slick_slider .slider-item .slider-text-holder {
  background-color: #e2e1e7;
  padding: 3rem;
  max-width: 80%;
  margin: -5rem auto 0;
  z-index: 99;
  text-align: center;
}

@media print, screen and (min-width: 48.0625em) {
  .view-id-consulo_frontpage .slick_slider .slider-item .slider-text-holder {
    position: absolute;
    left: 60%;
    top: 0;
    bottom: 0;
    max-width: 30%;
    height: 100vh;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center;
    background-color: transparent;
    padding: 0;
    text-align: left;
    margin: auto;
  }
}

.carousel-image-cover {
  position: relative;
  width: 100vw;
  height: 50vh;
  display: block;
  z-index: -1;
}

@media print, screen and (min-width: 48.0625em) {
  .carousel-image-cover {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    overflow: hidden;
    width: auto;
    height: auto;
    z-index: 0;
  }
}

.carousel-image {
  z-index: 0;
  height: 100%;
  width: 100%;
  background: no-repeat top left;
  background-size: cover;
}

.slick-slide {
  height: 100vh !important;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/*# sourceMappingURL=components.css.map */
