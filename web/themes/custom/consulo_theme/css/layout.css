@charset "UTF-8";
/**
 * @file
 * SMACSS: layout
 *
 * Design-patterns, and macro arrangement of a web page,
 * including any grid systems.
 *
 * ITCSS: objects
 */
/**
 * Imports
 * First import our custom variables and mixins
 */
/**
 * @file
 * Sass index file
 *
 * The main importer and organizer sass file.
 *
 */
/**
 * Settings
 *
 * Setting files contain **global** configurations that are shared by more than
 * one modules.
 * Settings that are connected to one and only module are a part of the module
 * itself.
 * Local configurations should be contained into the modules (objects,
 * components, etc.) that are related to.
 */
/**
 * @file
 * Settings
 *
 * Setting files contain **global** configurations that are shared by more than
 * one modules. Settings that are connected to one and only module are a part
 * of the module itself.
 * Local configurations should be contained into the modules (objects,
 * components, etc.) that are related to.
 * It’s important not to output any CSS in the first 2 layers.
 */
/**
 * @file
 * Breakpoint Settings
 *
 * - Define breakpoint variables
 */
/**
 * @file
 * Color Settings
 *
 * - Define color variables
 */
/**
 * @file
 * Breakpoint Settings
 *
 * - Define breakpoint variables
 */
/**
 * @file
 * Typography Settings
 *
 * - Import Webfonts
 * - Define Font-families
 * - Define Typography-related global variables
 */
@import url("https://fonts.googleapis.com/css?family=Playfair+Display");
@import url("https://fonts.googleapis.com/css?family=Rubik:400,500,700");
/**
 * @file
 *** FOUNDATION FOR SITES BY ZURB ***
 * foundation.zurb.com
 * @license under MIT Open Source
 */
/**
 * Imports
 */
/**
 * @file
 *** Foundation for Sites by ZURB ***
 * foundation.zurb.com
 * @licence under MIT Open Source
 */
/**
 * @group functions
 */
/**
 * Removes the unit (e.g. px, em, rem) from a value, returning the number only.
 *
 * @param {Number} $num - Number to strip unit from.
 * @returns {Number} The same number, sans unit.
 */
/**
 * Converts one or more pixel values into matching rem values.
 *
 * @param {Number|List} $values - One or more values to convert.
 * Be sure to separate them with spaces and not commas. If you
 * need to convert a comma-separated list, wrap the list in
 * parentheses.
 *
 * @param {Number} $base [null] - The base value to use when
 * calculating the `rem`. If you're using Foundation out of
 * the box, this is 16px. If this parameter is `null`, the
 * function will reference the `$base-font-size` variable as
 * the base.
 *
 * @returns {List} A list of converted values.
 */
/**
 * Converts a pixel value to matching rem value. *Any* value passed, regardless
 * of unit, is assumed to be a pixel value. By default, the base pixel value
 * used to calculate the rem value is taken from the `$global-font-size`
 variable.
 *
 * @access private
 * @param {Number} $value - Pixel value to convert.
 * @param {Number} $base [null] - Base for pixel conversion.
 * @returns {Number} A number in rems, calculated based on the given value and
 * the base pixel value. rem values are passed through as is.
 */
/**
 * Converts a pixel, percentage, rem or em value to a unitless value based on a
 * given font size. Ideal for working out unitless line heights.
 *
 * @param {Number} $value - Value to convert to a unitless line height
 * @param {Number} $base - The font size to use to work out the line height
 * - defaults to $global-font-size
 * @return {Number} - Unitless number
 */
/**
 * @file
 *** FOUNDATION FOR SITES BY ZURB ***
 * foundation.zurb.com
 * @licence under MIT Open Source
 */
/**
 * @group functions
 * Determine if a value is not falsey, in CSS terms.
 * Falsey values are `null`, `none`,  * `0` with any
 * unit, or an empty list.
 *
 * @param {Mixed} $val - Value to check.
 *
 * @returns {Boolean} `true` if `$val` is not falsey.
 */
/**
 * Determine a top/right/bottom/right value on a padding, margin, etc.
 * property, no matter how many values were passed in. Use this
 * function if you need to know the specific side of a value, but don't
 * know if the value is using a shorthand format.
 *
 * @param {List|Number} $val - Value to analyze. Should be a shorthand
 * sizing property, e.g. "1em 2em 1em"
 *
 * @param {Keyword} $side - Side to return. Should be `top`, `right`,
 * `bottom`, or `left`.
 *
 * @returns {Number} A single value based on `$val` and `$side`.
 */
/**
 * Given border $val, find a specific element of the border, which is $elem.
 * The possible values for $elem are width, style, and color.
 *
 * @param {List} $val - Border value to find a value in.
 *
 * @param {Keyword} $elem - Border component to extract.
 *
 * @returns {Mixed} If the value exists, returns the value. If the value is
 * not in the border definition, the function will return a 0px width, solid
 * style, or black border.
 */
/**
 * Finds a value in a nested map.
 *
 * @link https://css-tricks.com/snippets/sass/deep-getset-maps/ Deep Get/Set in Maps
 * @param {Map} $map - Map to pull a value from.
 * @param {String} $keys... - Keys to use when looking for a value.
 * @returns {Mixed} The value found in the map.
 */
/**
 * Casts a map into a list.
 *
 * @link http://hugogiraudel.com/2014/04/28/casting-map-into-list/
 * @param {Map} $map - Map to pull a value from.
 * @returns {List} Depending on the flag, returns either $keys or $values or both.
 */
/**
 * Safely return a value from a map.
 *
 * @param {Map} $map - Map to retrieve a value from.
 * @param {String} $key - Name of the map key.
 * @returns {List} Found value.
 */
/**
 * @group breakpoints
 * A list of named breakpoints. You can use these with the `breakpoint()` mixin
 * to quickly create media queries.
 *
 * @type Map
 */
/**
 * The largest named breakpoint in which to include print as a media type
 *
 * @type Keyword
 */
/**
 * All of the names in this list will be output as classes in your CSS, like
 * `.small-12`, `.medium-6`, and so on. Each value in this list must also be in
 * the `$breakpoints` map.
 *
 * @type List
 */
/**
 * Generates a media query string matching the input value. Refer to the
 * documentation for the `breakpoint()` mixin to see what the possible
 * inputs are.
 *
 * @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem,
 * or em value to process.
 */
/**
 * Wraps a media query around the content you put inside the mixin. This mixin
 * accepts a number of values:
 * - If a string is passed, the mixin will look for it in the `$breakpoints`
 *   map, and use a media query there.
 * - If a pixel value is passed, it will be converted to an em value using
 *   `$global-font-size` as the base.
 * - If a rem value is passed, the unit will be changed to em.
 * - If an em value is passed, the value will be used as-is.
 *
 * @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em
 * value to process.
 * @output If the breakpoint is "0px and larger", outputs the content as-is.
 * Otherwise, outputs the content wrapped in a media query.
 */
/**
 * Convers the breakpoints map to a URL-encoded string, like this:
 * `key1=value1&key2=value2`. The value is then dropped into the CSS for a
 * special `<meta>` tag, which is read by the Foundation JavaScript. This is
 * how we transfer values from Sass to JavaScript, so they can be defined in
 * one place.
 *
 * @access private
 * @param {Map} $map - Map to convert.
 * @returns {String} A string containing the map's contents.
 */
/**
 * Find the next key in a map.
 *
 * @access private
 * @param {Map} $map - Map to traverse.
 * @param {Mixed} $key - Key to use as a starting point.
 * @returns {Mixed} The value for the key after `$key`, if `$key` was found.
 * If `$key` was not found, or `$key` was the last value in the map, returns
 * `null`.
 */
/**
 * Return a list of our named breakpoints less than $key. Useful for dealing with
 * responsive gutters for the grid.
 *
 * @access private
 * @param {String} $key - Key to use as last breakpoint.
 * @returns {Array} The list of breakpoints up to and. If $key is auto, returns
 * breakpoints above the zero
 */
/**
 * Return a list of our named breakpoints less than $key. Useful for dealing
 * with responsive gutters for the grid.
 *
 * @access private
 * @param {String} $breakpoing - a named or non-named breakpoing.
 * @returns {Array} The list of breakpoints up to and. If $key is auto, returns
 * breakpoints above the zero
 */
/**
 * Get a value for a breakpoint from a responsive config map or single value.
 * - If the config is a single value, return it regardless of `$value`.
 * - If the config is a map and has the key `$value`, the exact breakpoint
 *   value is returned.
 * - If the config is a map and does *not* have the breakpoint, the value
 *   matching the next lowest breakpoint in the config map is returned.
 *
 * @access private
 * @param {Number|Map} $map - Responsive config map or single value.
 * @param {Keyword} $value - Breakpoint name to use.
 * @return {Mixed} The corresponding breakpoint value.
 */
/**
 * Tools
 *
 * Globally used mixins and functions.
 * It’s important not to output any CSS in the first 2 layers.
 */
/**
 * @file
 * Tools
 *
 * Tools are sets of globally used sass mixins and functions. Mixins that are
 * connected to one and only module are a part of the module itself.
 * It’s important not to output any CSS in the first 2 layers.
 */
/**
 * @file
 *** FOUNDATION FOR SITES AND CUSTOM MIXINS
 */
/**
 * @group Foundation for Sites mixins
 * Mixins placeholder file
 * @todo These are mostly from Foundation and should be removed and used straight from Foundation.
 */
.clearfix:before, .clearfix:after {
  content: " ";
  display: table;
}

.clearfix:after {
  clear: both;
}

/**
 * Horizontally or vertically aligns the items within a flex container.
 *
 * @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`,
 * `right`, `center`, `justify`, or `spaced`. Or, set it to `null`
 * (the default) to not set horizontal alignment.
 * @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`,
 * `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not
 * set vertical alignment.
 */
/**
 * Vertically align a single column within a flex row. Apply this mixin to a
 * flex column.
 *
 * @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`,
 * `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not
 * set vertical alignment.
 */
/**
 * Changes the source order of a flex child. Children with lower numbers appear
 * first in the layout.
 *
 * @param {Number} $order [0] - Order number to apply.
 */
/**
 * Change flex-direction
 *
 * @param {Keyword} $direction [row] - Flex direction to use. Can be
 * - row (default): same as text direction
 * - row-reverse: opposite to text direction
 * - column: same as row but top to bottom
 * - column-reverse: same as row-reverse top to bottom
 */
/**
 * @include flex-wrap(nowrap | wrap | wrap-reverse);
 * Default: nowrap
 */
/**
 * @include flex-flow(values);
 * Default: row nowrap
 */
/**
 * @include order(int);
 * Default: 0
 */
/**
 * @include flex-grow(int);
 * Default: 1
 */
/**
 * @include flex-shrink(int);
 * Default: 0
 */
/**
 * @include flex-basis(int);
 * Default: auto
 */
/**
 * @include justify-content(flex-start | flex-end | center | space-between
 * | space-around);
 * Default: flex-start
 */
/**
 * @include align-items(flex-start | flex-end | center | baseline | stretch);
 * Default: stretch
 */
/**
 * @include align-self(auto | flex-start | flex-end | center | baseline | stretch);
 * Default: auto
 */
/**
 * @include align-content(flex-start | flex-end | center | space-between | space-around | stretch);
 * Default: stretch
 */
/**
 * @group theming mixins
 */
/**
 * Utilities
 *
 * Utilities and helper classes with ability to override anything which goes
 * before in the triangle, eg. hide helper class.
 * They are usually one line of code and have !important to make sure they
 * override all element styles when used.
 */
/**
 * Layout
 *
 * Class-based selectors which define undecorated design patterns,
 * for example media object known from OOCSS. They provide structure to your
 * content, do not contain any cosmetic CSS and they should never been directly
 * overwritten.
 * This is the first layer in which we find class-based selectors. These are
 * concerned with styling non-cosmetic design patterns, or 'objects'. Objects
 * can range from something as simple as a .wrapper element, to layout systems,
 * through to things.
 */
/**
 * @file
 * Site Footer
 *
 * Footer is not a component, it's a layout section. Therefore all footer
 * related styles, rules come here except what has an independent component, ie.
 * Scroll to Top button.
 */
.region-footer {
  height: 4rem;
  background-color: #564b59;
  padding: 0 4.4rem;
}

.region-footer #block-footer {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

.path-frontpage .region-footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 100;
  background-color: rgba(86, 75, 89, 0.5);
}

/**
 * @file
 * Site Header
 *
 * Header is not a component, it's a layout section. Therefore all header
 * related styles, rules come here except what has an independent component, ie.
 * Navigation component.
 */
.region-header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-pack: justify;
  -font-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0 4.4rem;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 100;
}

/**
 * @file
 * Site Content
 *
 *
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LmNzcyIsInNvdXJjZXMiOlsibGF5b3V0LnNjc3MiLCJfaW5kZXguc2NzcyIsIjEuc2V0dGluZ3MvX3NldHRpbmdzLmFsbC5zY3NzIiwiMS5zZXR0aW5ncy9fc2V0dGluZ3MuYnJlYWtwb2ludHMuc2NzcyIsIjEuc2V0dGluZ3MvX3NldHRpbmdzLmNvbG9ycy5zY3NzIiwiMS5zZXR0aW5ncy9fc2V0dGluZ3MuZ3JpZC5zY3NzIiwiMS5zZXR0aW5ncy9fc2V0dGluZ3MudHlwb2dyYXBoeS5zY3NzIiwiMS5zZXR0aW5ncy9fYnJlYWtwb2ludC5zY3NzIiwiMS5zZXR0aW5ncy9fdW5pdC5zY3NzIiwiMS5zZXR0aW5ncy9fdmFsdWUuc2NzcyIsIjIudG9vbHMvX3Rvb2xzLmFsbC5zY3NzIiwiMi50b29scy9fdG9vbHMubWl4aW5zLnNjc3MiLCI0LmxheW91dC9fbGF5b3V0LmZvb3Rlci5zY3NzIiwiNC5sYXlvdXQvX2xheW91dC5oZWFkZXIuc2NzcyIsIjQubGF5b3V0L19sYXlvdXQubGF5b3V0LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7OztHQVFHO0FBRUg7OztHQUdHO0FDYkg7Ozs7OztHQU1HO0FBRUg7Ozs7Ozs7OztHQVNHO0FDakJIOzs7Ozs7Ozs7O0dBVUc7QUNWSDs7Ozs7R0FLRztBQ0xIOzs7OztHQUtHO0FDTEg7Ozs7O0dBS0c7QUNMSDs7Ozs7OztHQU9HO0FBSUgsT0FBTyxDQUFDLCtEQUFJO0FBQ1osT0FBTyxDQUFDLGdFQUFJO0FDWlo7Ozs7O0dBS0c7QUFLSDs7R0FFRztBQ1pIOzs7OztHQUtHO0FBSUg7O0dBRUc7QUFLSDs7Ozs7R0FLRztBQU9IOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQTZDSDs7Ozs7Ozs7Ozs7R0FXRztBQTRCSDs7Ozs7Ozs7R0FRRztBQ3ZJSDs7Ozs7R0FLRztBQUtIOzs7Ozs7Ozs7R0FTRztBQWdCSDs7Ozs7Ozs7Ozs7OztHQWFHO0FBc0NIOzs7Ozs7Ozs7OztHQVdHO0FBK0JIOzs7Ozs7O0dBT0c7QUFVSDs7Ozs7O0dBTUc7QUE2Qkg7Ozs7OztHQU1HO0FGeEtIOzs7Ozs7R0FNRztBQVdIOzs7O0dBSUc7QUFjSDs7Ozs7O0dBTUc7QUFJSDs7Ozs7OztHQU9HO0FBb0dIOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBZ0RIOzs7Ozs7Ozs7O0dBVUc7QUFZSDs7Ozs7Ozs7O0dBU0c7QUF3Qkg7Ozs7Ozs7O0dBUUc7QUFtQkg7Ozs7Ozs7O0dBUUc7QUFzQkg7Ozs7Ozs7Ozs7OztHQVlHO0FOL1VIOzs7OztHQUtHO0FTMUJIOzs7Ozs7O0dBT0c7QUNMSDs7O0dBR0c7QUFLSDs7OztHQUlHO0FBZ0RILEFBVkUsU0FVTyxBQVZOLE9BQU8sRUFVVixTQUFTLEFBVE4sTUFBTSxDQUFDO0VBQ04sT0FBTyxFQUFFLEdBQUc7RUFDWixPQUFPLEVBQUUsS0FBSztDQUNmOztBQU1ILEFBTEUsU0FLTyxBQUxOLE1BQU0sQ0FBQztFQUNOLEtBQUssRUFBRSxJQUFJO0NBQ1o7O0FBa0tIOzs7Ozs7Ozs7R0FTRztBQTJCSDs7Ozs7OztHQU9HO0FBZ0JIOzs7OztHQUtHO0FBTUg7Ozs7Ozs7O0dBUUc7QUFNSDs7O0dBR0c7QUFpQkg7OztHQUdHO0FBU0g7OztHQUdHO0FBVUg7OztHQUdHO0FBVUg7OztHQUdHO0FBU0g7OztHQUdHO0FBUUg7Ozs7R0FJRztBQW1DSDs7O0dBR0c7QUF5Qkg7OztHQUdHO0FBb0JIOzs7R0FHRztBQXFCSDs7R0FFRztBVnhkSDs7Ozs7OztHQU9HO0FEckJIOzs7Ozs7Ozs7OztHQVdHO0FZM0JIOzs7Ozs7O0dBT0c7QUFFSCxBQUFBLGNBQWMsQ0FBQztFQUNiLE1BQU0sRUFBRSxJQUFJO0VBQ1osZ0JBQWdCLEVSREMsT0FBTztFUUV4QixPQUFPLEVBQUUsUUFBUTtDQWNsQjs7QUFqQkQsQUFJRSxjQUpZLENBSVosYUFBYSxDQUFDO0VBQ1osT0FBTyxFQUFFLElBQUk7RUFDYixjQUFjLEVBQUUsR0FBRztFQUNuQixlQUFlLEVBQUUsYUFBYTtDQUMvQjs7QUFDRCxBQUFBLGVBQWUsQ0FUakIsY0FBYyxDQVNNO0VBQ2hCLFFBQVEsRUFBRSxLQUFLO0VBQ2YsTUFBTSxFQUFFLENBQUM7RUFDVCxJQUFJLEVBQUUsQ0FBQztFQUNQLEtBQUssRUFBRSxDQUFDO0VBQ1IsT0FBTyxFQUFFLEdBQUc7RUFDWixnQkFBZ0IsRVJkRCxxQkFBTztDUWV2Qjs7QUN6Qkg7Ozs7Ozs7R0FPRztBQUVILEFBQUEsY0FBYyxDQUFDO0VGbU1iLE9BQU8sRUFBRSxXQUFXO0VBQ3BCLE9BQU8sRUFBRSxRQUFRO0VBQ2pCLE9BQU8sRUFBRSxZQUFZO0VBQ3JCLE9BQU8sRUFBRSxXQUFXO0VBRXBCLE9BQU8sRUFBRSxJQUFJO0VBNkZiLGNBQWMsRUVuU1UsR0FBRztFRjJZekIsZ0JBQWdCLEVBQUUsT0FBTztFQUN6QixjQUFjLEVBQUUsT0FBTztFQUN2QixhQUFhLEVBQUUsT0FBTztFQWF4Qix1QkFBdUIsRUV6WkUsYUFBYTtFRjBadEMsZUFBZSxFRTFaVSxhQUFhO0VBQ3RDLE9BQU8sRUFBRSxRQUFRO0VBQ2pCLFFBQVEsRUFBRSxLQUFLO0VBQ2YsR0FBRyxFQUFFLENBQUM7RUFDTixJQUFJLEVBQUUsQ0FBQztFQUNQLEtBQUssRUFBRSxDQUFDO0VBQ1IsT0FBTyxFQUFFLEdBQUc7Q0FDYjs7QUNuQkQ7Ozs7O0dBS0cifQ== */

/*# sourceMappingURL=layout.css.map */
